=begin
#Deliverr API

# **Note:** As of February 24 2023, Deliverr is not accepting new API accounts. Existing integrations already using the Deliverr API in production may continue usage and development.  All other Deliverr accounts initiating Deliverr API requests will be denied access. A new Logistics API is being developed by Shopify and will be replacing the Deliverr API.  # Getting Started  To start using the Deliverr API, you must have an active login account to the Deliverr web portal. To inbound physical inventory, ship orders, process returns or parcel transactions, you'll also need to set up a billing account.  ## If you do not already have a Deliverr account 1. Create an account for free at https://sellerportal.deliverr.com 2. When you are asked to choose an integration, you can click <b>Skip</b> at the upper right corner 3. Once you have logged in, you can start the OAuth process below  ## If you already have a Deliverr account 1. You can access the Products, Webhooks and Reports API immediately regardless of billing status 2. All other APIs available will require you to have set up billing with Deliverr 3. The Returns, Parcel, and Parcel Integration APIs are only accessible to select merchants  ## Guides and examples  Please visit the <a href='https://support.deliverr.com/hc/en-us/sections/6332705638423-Deliverr-API'>Deliverr API Guide</a> to view steps and code examples.  # Release Notes  Please refer to the following <a href='https://support.deliverr.com/hc/en-us/articles/9399822031383'>Deliverr API - Release Notes</a> help center article to view the most recent changes to Deliverr API.  # Status Page  You can find information about the current status of the API endpoints at <a href='https://deliverrstatus.com/'>deliverrstatus.com</a>  

The version of the OpenAPI document: 1.0.0
Contact: support@deliverr.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'cgi'

module DeliverrAPI
  class ParcelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a parcel and purchase a label for that parcel.
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [ParcelCreateResponse]
    def create_parcel(request_body, opts = {})
      data, _status_code, _headers = create_parcel_with_http_info(request_body, opts)
      data
    end

    # Create a parcel and purchase a label for that parcel.
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParcelCreateResponse, Integer, Hash)>] ParcelCreateResponse data, response status code and response headers
    def create_parcel_with_http_info(request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParcelsApi.create_parcel ...'
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling ParcelsApi.create_parcel"
      end
      # resource path
      local_var_path = '/parcels/v1/parcel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ParcelCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"ParcelsApi.create_parcel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParcelsApi#create_parcel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the parcel with the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [ParcelGetResponse]
    def get_parcel(parcel_id, opts = {})
      data, _status_code, _headers = get_parcel_with_http_info(parcel_id, opts)
      data
    end

    # Fetch the parcel with the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParcelGetResponse, Integer, Hash)>] ParcelGetResponse data, response status code and response headers
    def get_parcel_with_http_info(parcel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParcelsApi.get_parcel ...'
      end
      # verify the required parameter 'parcel_id' is set
      if @api_client.config.client_side_validation && parcel_id.nil?
        fail ArgumentError, "Missing the required parameter 'parcel_id' when calling ParcelsApi.get_parcel"
      end
      # resource path
      local_var_path = '/parcels/v1/parcel/{parcelId}'.sub('{' + 'parcelId' + '}', CGI.escape(parcel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParcelGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"ParcelsApi.get_parcel",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParcelsApi#get_parcel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the tracking information for the parcel with the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [ParcelTrackingGetResponse]
    def get_parcel_tracking(parcel_id, opts = {})
      data, _status_code, _headers = get_parcel_tracking_with_http_info(parcel_id, opts)
      data
    end

    # Fetch the tracking information for the parcel with the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParcelTrackingGetResponse, Integer, Hash)>] ParcelTrackingGetResponse data, response status code and response headers
    def get_parcel_tracking_with_http_info(parcel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParcelsApi.get_parcel_tracking ...'
      end
      # verify the required parameter 'parcel_id' is set
      if @api_client.config.client_side_validation && parcel_id.nil?
        fail ArgumentError, "Missing the required parameter 'parcel_id' when calling ParcelsApi.get_parcel_tracking"
      end
      # resource path
      local_var_path = '/parcels/v1/parcel/{parcelId}/tracking'.sub('{' + 'parcelId' + '}', CGI.escape(parcel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ParcelTrackingGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"ParcelsApi.get_parcel_tracking",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParcelsApi#get_parcel_tracking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a quote for a label purchase without actually purchasing a label.
    # @param quote_create_request [QuoteCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [QuoteCreateResponse]
    def get_quote(quote_create_request, opts = {})
      data, _status_code, _headers = get_quote_with_http_info(quote_create_request, opts)
      data
    end

    # Create a quote for a label purchase without actually purchasing a label.
    # @param quote_create_request [QuoteCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuoteCreateResponse, Integer, Hash)>] QuoteCreateResponse data, response status code and response headers
    def get_quote_with_http_info(quote_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParcelsApi.get_quote ...'
      end
      # verify the required parameter 'quote_create_request' is set
      if @api_client.config.client_side_validation && quote_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'quote_create_request' when calling ParcelsApi.get_quote"
      end
      # resource path
      local_var_path = '/parcels/v1/parcel/quote'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(quote_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'QuoteCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"ParcelsApi.get_quote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParcelsApi#get_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the tracking URL for the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_tracking_url(parcel_id, opts = {})
      data, _status_code, _headers = get_tracking_url_with_http_info(parcel_id, opts)
      data
    end

    # Fetch the tracking URL for the specified ID.
    # @param parcel_id [String] Unique ID used to track the parcel, returned after acquiring a purchase label.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_tracking_url_with_http_info(parcel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParcelsApi.get_tracking_url ...'
      end
      # verify the required parameter 'parcel_id' is set
      if @api_client.config.client_side_validation && parcel_id.nil?
        fail ArgumentError, "Missing the required parameter 'parcel_id' when calling ParcelsApi.get_tracking_url"
      end
      # resource path
      local_var_path = '/parcels/v1/trackingUrl/{parcelId}'.sub('{' + 'parcelId' + '}', CGI.escape(parcel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"ParcelsApi.get_tracking_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParcelsApi#get_tracking_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
