=begin
#Deliverr API

# **Note:** As of February 24 2023, Deliverr is not accepting new API accounts. Existing integrations already using the Deliverr API in production may continue usage and development.  All other Deliverr accounts initiating Deliverr API requests will be denied access. A new Logistics API is being developed by Shopify and will be replacing the Deliverr API.  # Getting Started  To start using the Deliverr API, you must have an active login account to the Deliverr web portal. To inbound physical inventory, ship orders, process returns or parcel transactions, you'll also need to set up a billing account.  ## If you do not already have a Deliverr account 1. Create an account for free at https://sellerportal.deliverr.com 2. When you are asked to choose an integration, you can click <b>Skip</b> at the upper right corner 3. Once you have logged in, you can start the OAuth process below  ## If you already have a Deliverr account 1. You can access the Products, Webhooks and Reports API immediately regardless of billing status 2. All other APIs available will require you to have set up billing with Deliverr 3. The Returns, Parcel, and Parcel Integration APIs are only accessible to select merchants  ## Guides and examples  Please visit the <a href='https://support.deliverr.com/hc/en-us/sections/6332705638423-Deliverr-API'>Deliverr API Guide</a> to view steps and code examples.  # Release Notes  Please refer to the following <a href='https://support.deliverr.com/hc/en-us/articles/9399822031383'>Deliverr API - Release Notes</a> help center article to view the most recent changes to Deliverr API.  # Status Page  You can find information about the current status of the API endpoints at <a href='https://deliverrstatus.com/'>deliverrstatus.com</a>  

The version of the OpenAPI document: 1.0.0
Contact: support@deliverr.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0

=end

require 'cgi'

module DeliverrAPI
  class BundlesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new bundle.
    # @param api_bundle_model [ApiBundleModel] 
    # @param [Hash] opts the optional parameters
    # @return [ApiBundleModelResponse]
    def create_bundle(api_bundle_model, opts = {})
      data, _status_code, _headers = create_bundle_with_http_info(api_bundle_model, opts)
      data
    end

    # Creates a new bundle.
    # @param api_bundle_model [ApiBundleModel] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiBundleModelResponse, Integer, Hash)>] ApiBundleModelResponse data, response status code and response headers
    def create_bundle_with_http_info(api_bundle_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.create_bundle ...'
      end
      # verify the required parameter 'api_bundle_model' is set
      if @api_client.config.client_side_validation && api_bundle_model.nil?
        fail ArgumentError, "Missing the required parameter 'api_bundle_model' when calling BundlesApi.create_bundle"
      end
      # resource path
      local_var_path = '/bundles/v1/bundle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(api_bundle_model)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiBundleModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.create_bundle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#create_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bundle information for a bundle.
    # @param bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiBundleModelResponse]
    def get_bundle(bundle_id, opts = {})
      data, _status_code, _headers = get_bundle_with_http_info(bundle_id, opts)
      data
    end

    # Get bundle information for a bundle.
    # @param bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiBundleModelResponse, Integer, Hash)>] ApiBundleModelResponse data, response status code and response headers
    def get_bundle_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.get_bundle ...'
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.get_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id.to_s.length > 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.get_bundle, the character length must be smaller than or equal to 11.'
      end

      if @api_client.config.client_side_validation && bundle_id.to_s.length < 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.get_bundle, the character length must be great than or equal to 11.'
      end

      pattern = Regexp.new(/^B[0-9a-zA-Z]+$/)
      if @api_client.config.client_side_validation && bundle_id !~ pattern
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.get_bundle, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/bundles/v1/bundle/{bundleId}'.sub('{' + 'bundleId' + '}', CGI.escape(bundle_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiBundleModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.get_bundle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bundle information for a bundle by the external bundle id assigned.
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiBundleModelResponse]
    def get_bundle_by_external_bundle_id(external_bundle_id, opts = {})
      data, _status_code, _headers = get_bundle_by_external_bundle_id_with_http_info(external_bundle_id, opts)
      data
    end

    # Get bundle information for a bundle by the external bundle id assigned.
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiBundleModelResponse, Integer, Hash)>] ApiBundleModelResponse data, response status code and response headers
    def get_bundle_by_external_bundle_id_with_http_info(external_bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.get_bundle_by_external_bundle_id ...'
      end
      # verify the required parameter 'external_bundle_id' is set
      if @api_client.config.client_side_validation && external_bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_bundle_id' when calling BundlesApi.get_bundle_by_external_bundle_id"
      end
      if @api_client.config.client_side_validation && external_bundle_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.get_bundle_by_external_bundle_id, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && external_bundle_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.get_bundle_by_external_bundle_id, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/bundles/v1/bundle/externalId/{externalBundleId}'.sub('{' + 'externalBundleId' + '}', CGI.escape(external_bundle_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiBundleModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.get_bundle_by_external_bundle_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundle_by_external_bundle_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get available inventory information for the bundle.
    # @param bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiBundleInventoryResponseModel]
    def get_bundle_inventory(bundle_id, opts = {})
      data, _status_code, _headers = get_bundle_inventory_with_http_info(bundle_id, opts)
      data
    end

    # Get available inventory information for the bundle.
    # @param bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiBundleInventoryResponseModel, Integer, Hash)>] ApiBundleInventoryResponseModel data, response status code and response headers
    def get_bundle_inventory_with_http_info(bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.get_bundle_inventory ...'
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.get_bundle_inventory"
      end
      if @api_client.config.client_side_validation && bundle_id.to_s.length > 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.get_bundle_inventory, the character length must be smaller than or equal to 11.'
      end

      if @api_client.config.client_side_validation && bundle_id.to_s.length < 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.get_bundle_inventory, the character length must be great than or equal to 11.'
      end

      pattern = Regexp.new(/^B[0-9a-zA-Z]+$/)
      if @api_client.config.client_side_validation && bundle_id !~ pattern
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.get_bundle_inventory, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/bundles/v1/bundle/{bundleId}/inventory'.sub('{' + 'bundleId' + '}', CGI.escape(bundle_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiBundleInventoryResponseModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.get_bundle_inventory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#get_bundle_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Links an externalBundleId to an existing bundle. A bundle can only be linked to one externalBundleId.
    # @param bundle_id [String] 
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApiBundleModelResponse]
    def link_alias_to_bundle(bundle_id, external_bundle_id, opts = {})
      data, _status_code, _headers = link_alias_to_bundle_with_http_info(bundle_id, external_bundle_id, opts)
      data
    end

    # Links an externalBundleId to an existing bundle. A bundle can only be linked to one externalBundleId.
    # @param bundle_id [String] 
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiBundleModelResponse, Integer, Hash)>] ApiBundleModelResponse data, response status code and response headers
    def link_alias_to_bundle_with_http_info(bundle_id, external_bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.link_alias_to_bundle ...'
      end
      # verify the required parameter 'bundle_id' is set
      if @api_client.config.client_side_validation && bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'bundle_id' when calling BundlesApi.link_alias_to_bundle"
      end
      if @api_client.config.client_side_validation && bundle_id.to_s.length > 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.link_alias_to_bundle, the character length must be smaller than or equal to 11.'
      end

      if @api_client.config.client_side_validation && bundle_id.to_s.length < 11
        fail ArgumentError, 'invalid value for "bundle_id" when calling BundlesApi.link_alias_to_bundle, the character length must be great than or equal to 11.'
      end

      pattern = Regexp.new(/^B[0-9a-zA-Z]+$/)
      if @api_client.config.client_side_validation && bundle_id !~ pattern
        fail ArgumentError, "invalid value for 'bundle_id' when calling BundlesApi.link_alias_to_bundle, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'external_bundle_id' is set
      if @api_client.config.client_side_validation && external_bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_bundle_id' when calling BundlesApi.link_alias_to_bundle"
      end
      if @api_client.config.client_side_validation && external_bundle_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.link_alias_to_bundle, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && external_bundle_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.link_alias_to_bundle, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/bundles/v1/bundle/{bundleId}/link/{externalBundleId}'.sub('{' + 'bundleId' + '}', CGI.escape(bundle_id.to_s)).sub('{' + 'externalBundleId' + '}', CGI.escape(external_bundle_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiBundleModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.link_alias_to_bundle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#link_alias_to_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlinks an externalBundleId from any existing bundle it is currently associated with.
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlink_alias_from_bundles(external_bundle_id, opts = {})
      unlink_alias_from_bundles_with_http_info(external_bundle_id, opts)
      nil
    end

    # Unlinks an externalBundleId from any existing bundle it is currently associated with.
    # @param external_bundle_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlink_alias_from_bundles_with_http_info(external_bundle_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BundlesApi.unlink_alias_from_bundles ...'
      end
      # verify the required parameter 'external_bundle_id' is set
      if @api_client.config.client_side_validation && external_bundle_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_bundle_id' when calling BundlesApi.unlink_alias_from_bundles"
      end
      if @api_client.config.client_side_validation && external_bundle_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.unlink_alias_from_bundles, the character length must be smaller than or equal to 255.'
      end

      if @api_client.config.client_side_validation && external_bundle_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "external_bundle_id" when calling BundlesApi.unlink_alias_from_bundles, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/bundles/v1/bundle/unlink/externalId/{externalBundleId}'.sub('{' + 'externalBundleId' + '}', CGI.escape(external_bundle_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2.0']

      new_options = opts.merge(
        :operation => :"BundlesApi.unlink_alias_from_bundles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BundlesApi#unlink_alias_from_bundles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
